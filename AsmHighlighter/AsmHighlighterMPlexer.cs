//
//  This CSharp output file generated by Managed Package LEX
//  Version:  0.6.0 (1-August-2007)
//  Machine:  PC-DE-HOME
//  DateTime: 17/10/2009 15:52:17
//  UserName: Home
//  MPLEX input file <AsmHighlighterMPLexer.lex>
//  MPLEX frame file <C:\Program Files\Microsoft Visual Studio 2008 SDK\VisualStudioIntegration\Tools\bin\mplex.frame>
//
//  Option settings: unicode, verbose, noparser, minimize, classes, compressmap, compressnext
//

#define BACKUP
#define STANDALONE
//
// mplex.frame
// Version 0.6.1 of 1 August 2007
// Left and Right Anchored state support.
// Start condition stack. Two generic params.
// Using fixed length context handling for right anchors
//
using System;
using System.IO;
using System.Collections.Generic;
#if !STANDALONE
using Babel.ParserGenerator;
#endif // STANDALONE


namespace AsmHighlighter.Lexer
{   
    /// <summary>
    /// Summary Canonical example of MPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone MPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

    public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

    public abstract class ScanBase
    {
        public abstract int yylex();
        protected abstract int CurrentSc { get; set; }
        //
        // Override this virtual EolState property if the scanner state is more
        // complicated then a simple copy of the current start state ordinal
        //
        public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
    }
    
    public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
    }
    
    

#endif // STANDALONE

    public abstract class ScanBuff
    {
        public const int EOF = -1;
        public abstract int Pos { get; set; }
        public abstract int Read();
        public abstract int Peek();
        public abstract int ReadPos { get; }
        public abstract string GetString(int b, int e);
    }
    
    // If the compiler can't find ScanBase maybe you need
    // to run mppg with /mplex, or run mplex with /noparser
    public sealed class Scanner : ScanBase, IColorScan
    {
   
        public ScanBuff buffer;
        private IErrorHandler handler;
        int scState;
        
        private static int GetMaxParseToken() {
            System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();        
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return scState; }
             set { scState = value; currentStart = startState[value]; }
        }
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 34;
        const int initial = 35;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

/*
//  ASMHighlighterMPLexer.lex.
//  Lexical description for MPLex. This file is inspired from http://svn.assembla.com/svn/ppjlab/trunk/scanner.lex
//  ---------------------------------------------------------------------
// 
//  Copyright (c) 2009 Alexandre Mutel and Microsoft Corporation.  
//  All rights reserved.
// 
//  This code module is part of AsmHighlighter, a plugin for visual studio
//  to provide syntax highlighting for x86 ASM language (.asm, .inc)
// 
//  ------------------------------------------------------------------
// 
//  This code is licensed under the Microsoft Public License. 
//  See the file License.txt for the license details.
//  More info on: http://asmhighlighter.codeplex.com
// 
//  ------------------------------------------------------------------
*/
/**********************************************************************************/
/********************************User Defined Code*********************************/
/**********************************************************************************/
public IAsmHighlighterTokenProvider AsmHighlighterTokenProvider = null; // Token provider
/**********************************************************************************/
/**********Start Condition Declarations and Lexical Category Definitions***********/
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
/********************************The Rules Section*********************************/
/**********************************************************************************/
/**********************************************************************************/
        int state;
        int currentStart = initial;
        int chr;           // last character read
        int cNum;          // ordinal number of chr
        int lNum = 0;      // current line number
        int lineStartNum;  // cNum at start of line

        //
        // The following instance variables are useful, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokNum;        // ordinal number of first character
        int tokLen;        // number of character in token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public sbyte[] nxt;
        public Table(int m, int x, int d, sbyte[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = {35, 0};

#region CharacterMap
    //
    // There are 31 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 125 entries
    // There are 1 runs, 0 singletons
    //
    static sbyte[] map0 = new sbyte[125] {
/* \0     */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 30, 0, 30, 30, 30, 2, 2, 
/* \020   */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/* \040   */ 30, 2, 22, 2, 2, 11, 28, 24, 5, 7, 2, 18, 25, 19, 8, 2, 
/* 0      */ 15, 15, 6, 6, 6, 6, 6, 6, 6, 6, 2, 1, 2, 2, 2, 2, 
/* @      */ 10, 12, 12, 12, 12, 17, 21, 9, 20, 9, 9, 9, 9, 9, 9, 9, 
/* P      */ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 26, 23, 27, 2, 9, 
/* `      */ 2, 12, 16, 12, 14, 17, 21, 9, 13, 9, 9, 9, 9, 9, 9, 9, 
/* p      */ 9, 9, 9, 3, 4, 9, 9, 9, 9, 9, 9, 2, 29 };

    sbyte Map(int chr)
    { // '\0' <= chr <= '\uFFFF'
      if (chr < 125) return map0[chr - 0];
      else return (sbyte)2;
    }
#endregion

    static Table[] NxS = new Table[47];

    static Scanner() {
    NxS[0] = // Shortest string ""
        new Table(0, 0, 0, null);
    NxS[1] = // Shortest string "\t"
        new Table(0, 0, -1, null);
    NxS[2] = // Shortest string ";"
        new Table(0, 1, 2, new sbyte[] {-1});
    NxS[3] = // Shortest string "\0"
        new Table(0, 0, -1, null);
    NxS[4] = // Shortest string "s"
        new Table(3, 19, -1, new sbyte[] {5, 32, -1, 5, -1, -1, 
        5, -1, -1, 5, 5, 5, 5, 5, 5, -1, -1, 5, 5});
    NxS[5] = // Shortest string "t"
        new Table(3, 19, -1, new sbyte[] {5, 5, -1, 5, -1, -1, 
        5, -1, -1, 5, 5, 5, 5, 5, 5, -1, -1, 5, 5});
    NxS[6] = // Shortest string "("
        new Table(0, 0, -1, null);
    NxS[7] = // Shortest string "2"
        new Table(6, 16, -1, new sbyte[] {7, -1, 24, -1, -1, -1, 
        40, 25, 26, 7, 40, 41, -1, -1, -1, 40});
    NxS[8] = // Shortest string ")"
        new Table(0, 0, -1, null);
    NxS[9] = // Shortest string "."
        new Table(3, 19, -1, new sbyte[] {9, 9, -1, 9, -1, -1, 
        9, -1, -1, 9, 9, 9, 9, 9, 9, -1, -1, 9, 9});
    NxS[10] = // Shortest string "@"
        new Table(3, 19, -1, new sbyte[] {10, 10, -1, 10, -1, -1, 
        10, -1, -1, 10, 10, 10, 10, 10, 10, -1, -1, 10, 10});
    NxS[11] = // Shortest string "%"
        new Table(3, 19, -1, new sbyte[] {11, 11, -1, 11, -1, -1, 
        11, -1, -1, 11, 11, 11, 11, 11, 11, -1, -1, 11, 11});
    NxS[12] = // Shortest string "0"
        new Table(6, 16, -1, new sbyte[] {7, -1, 24, -1, -1, -1, 
        40, 25, 26, 12, 27, 41, -1, -1, -1, 40});
    NxS[13] = // Shortest string "+"
        new Table(0, 0, -1, null);
    NxS[14] = // Shortest string "-"
        new Table(0, 0, -1, null);
    NxS[15] = // Shortest string """
        new Table(22, 2, 38, new sbyte[] {23, 39});
    NxS[16] = // Shortest string "'"
        new Table(23, 2, 36, new sbyte[] {37, 22});
    NxS[17] = // Shortest string ","
        new Table(0, 0, -1, null);
    NxS[18] = // Shortest string "["
        new Table(0, 0, -1, null);
    NxS[19] = // Shortest string "]"
        new Table(0, 0, -1, null);
    NxS[20] = // Shortest string "&"
        new Table(0, 0, -1, null);
    NxS[21] = // Shortest string "|"
        new Table(0, 0, -1, null);
    NxS[22] = // Shortest string "''"
        new Table(0, 0, -1, null);
    NxS[23] = // Shortest string """"
        new Table(0, 0, -1, null);
    NxS[24] = // Shortest string "0."
        new Table(6, 16, -1, new sbyte[] {24, -1, -1, -1, -1, -1, 
        -1, 30, -1, 24, -1, 43, -1, -1, 30, 30});
    NxS[25] = // Shortest string "0h"
        new Table(0, 0, -1, null);
    NxS[26] = // Shortest string "0d"
        new Table(6, 16, -1, new sbyte[] {40, -1, -1, -1, -1, -1, 
        40, 25, 40, 40, 40, 40, -1, -1, -1, 40});
    NxS[27] = // Shortest string "0b"
        new Table(6, 16, -1, new sbyte[] {40, -1, -1, -1, -1, -1, 
        40, 25, 40, 40, 40, 40, -1, -1, -1, 40});
    NxS[28] = // Shortest string "0E2"
        new Table(6, 16, -1, new sbyte[] {28, -1, -1, -1, -1, -1, 
        40, 25, 40, 28, 40, 40, -1, -1, -1, 40});
    NxS[29] = // Shortest string "0E+2"
        new Table(6, 10, -1, new sbyte[] {29, -1, -1, -1, -1, -1, 
        -1, -1, -1, 29});
    NxS[30] = // Shortest string "0.h"
        new Table(0, 0, -1, null);
    NxS[31] = // Shortest string "0.E2"
        new Table(6, 16, -1, new sbyte[] {31, -1, -1, -1, -1, -1, 
        -1, 30, -1, 31, -1, -1, -1, -1, 30, 30});
    NxS[32] = // Shortest string "st"
        new Table(3, 19, -1, new sbyte[] {5, 5, 45, 33, -1, -1, 
        5, -1, -1, 5, 5, 5, 33, 5, 5, -1, -1, 5, 5});
    NxS[33] = // Shortest string "st2"
        new Table(3, 19, -1, new sbyte[] {5, 5, -1, 5, -1, -1, 
        5, -1, -1, 5, 5, 5, 5, 5, 5, -1, -1, 5, 5});
    NxS[34] = // Shortest string "st(2)"
        new Table(0, 0, -1, null);
    NxS[35] = // Shortest string ""
        new Table(15, 28, 5, new sbyte[] {12, 5, 5, 13, 14, 5, 
        5, 15, 3, 16, 17, 18, 19, 20, 21, 1, 1, 2, 3, 4, 5, 6, 
        7, 8, 9, 5, 10, 11});
    NxS[36] = // Shortest string "';"
        new Table(23, 2, 36, new sbyte[] {37, 22});
    NxS[37] = // Shortest string "'\"
        new Table(0, 1, 36, new sbyte[] {-1});
    NxS[38] = // Shortest string "";"
        new Table(22, 2, 38, new sbyte[] {23, 39});
    NxS[39] = // Shortest string ""\"
        new Table(0, 1, 38, new sbyte[] {-1});
    NxS[40] = // Shortest string "0A"
        new Table(6, 16, -1, new sbyte[] {40, -1, -1, -1, -1, -1, 
        40, 25, 40, 40, 40, 40, -1, -1, -1, 40});
    NxS[41] = // Shortest string "0E"
        new Table(6, 16, -1, new sbyte[] {28, -1, -1, -1, -1, -1, 
        40, 25, 40, 28, 40, 40, 42, 42, -1, 40});
    NxS[42] = // Shortest string "0E+"
        new Table(6, 10, -1, new sbyte[] {29, -1, -1, -1, -1, -1, 
        -1, -1, -1, 29});
    NxS[43] = // Shortest string "0.E"
        new Table(6, 14, -1, new sbyte[] {31, -1, -1, -1, -1, -1, 
        -1, -1, -1, 31, -1, -1, 44, 44});
    NxS[44] = // Shortest string "0.E+"
        new Table(6, 10, -1, new sbyte[] {31, -1, -1, -1, -1, -1, 
        -1, -1, -1, 31});
    NxS[45] = // Shortest string "st("
        new Table(6, 10, -1, new sbyte[] {46, -1, -1, -1, -1, -1, 
        -1, -1, -1, 46});
    NxS[46] = // Shortest string "st(2"
        new Table(7, 1, -1, new sbyte[] {34});
    }

int NextState(int qStat) {
    if (chr == ScanBuff.EOF)
        return (qStat <= maxAccept && qStat != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[qStat].min;
        if (idx < 0) idx += 31;
        if ((uint)idx >= (uint)NxS[qStat].rng) rslt = NxS[qStat].dflt;
        else rslt = NxS[qStat].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}

int NextState() {
    if (chr == ScanBuff.EOF)
        return (state <= maxAccept && state != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[state].min;
        if (idx < 0) idx += 31;
        if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
        else rslt = NxS[state].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}
#endregion


#if BACKUP
        // ====================== Nested class ==========================

        internal class Context // class used for automaton backup.
        {
            public int bPos;
            public int cNum;
            public int state;
            public int cChr;
        }
#endif // BACKUP


        // ====================== Nested class ==========================

        public sealed class StringBuff : ScanBuff
        {
            string str;        // input buffer
            int bPos;          // current position in buffer
            int sLen;

            public StringBuff(string str)
            {
                this.str = str;
                this.sLen = str.Length;
            }

            public override int Read()
            {
                if (bPos < sLen) return str[bPos++];
                else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see newline
                else return EOF;                                  // two strikes and you're out!
            }
            
            public override int ReadPos { get { return bPos - 1; } }

            public override int Peek()
            {
                if (bPos < sLen) return str[bPos];
                else return '\n';
            }

            public override string GetString(int beg, int end)
            {
                //  "end" can be greater than sLen with the BABEL
                //  option set.  Read returns a "virtual" EOL if
                //  an attempt is made to read past the end of the
                //  string buffer.  Without the guard any attempt 
                //  to fetch yytext for a token that includes the 
                //  EOL will throw an index exception.
                if (end > sLen) end = sLen;
                if (end <= beg) return ""; 
                else return str.Substring(beg, end - beg);
            }

            public override int Pos
            {
                get { return bPos; }
                set { bPos = value; }
            }
        }

        // ====================== Nested class ==========================

        public sealed class StreamBuff : ScanBuff
        {
            BufferedStream bStrm;   // input buffer
            int delta = 1;

            public StreamBuff(Stream str) { this.bStrm = new BufferedStream(str); }

            public override int Read() {
                return bStrm.ReadByte(); 
            }
            
            public override int ReadPos {
                get { return (int)bStrm.Position - delta; }
            }

            public override int Peek()
            {
                int rslt = bStrm.ReadByte();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            public override string GetString(int beg, int end)
            {
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (int i = 0; i < (end - beg); i++)
                    arr[i] = (char)bStrm.ReadByte();
                bStrm.Position = savePos;
                return new String(arr);
            }

            // Pos is the position *after* reading chr!
            public override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================

        /// <summary>
        /// This is the Buffer for UTF8 files.
        /// It attempts to read the encoding preamble, which for 
        /// this encoding should be unicode point \uFEFF which is 
        /// encoded as EF BB BF
        /// </summary>
        public class TextBuff : ScanBuff
        {
            protected BufferedStream bStrm;   // input buffer
            protected int delta = 1;
            
            private Exception BadUTF8()
            { return new Exception(String.Format("BadUTF8 Character")); }

            /// <summary>
            /// TextBuff factory.  Reads the file preamble
            /// and returns a TextBuff, LittleEndTextBuff or
            /// BigEndTextBuff according to the result.
            /// </summary>
            /// <param name="strm">The underlying stream</param>
            /// <returns></returns>
            public static TextBuff NewTextBuff(Stream strm)
            {
                // First check if this is a UTF16 file
                //
                int b0 = strm.ReadByte();
                int b1 = strm.ReadByte();

                if (b0 == 0xfe && b1 == 0xff)
                    return new BigEndTextBuff(strm);
                if (b0 == 0xff && b1 == 0xfe)
                    return new LittleEndTextBuff(strm);
                
                int b2 = strm.ReadByte();
                if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                    return new TextBuff(strm);
                //
                // There is no unicode preamble, so we
                // must go back to the UTF8 default.
                //
                strm.Seek(0, SeekOrigin.Begin);
                return new TextBuff(strm);
            }

            protected TextBuff(Stream str) { 
                this.bStrm = new BufferedStream(str);
            }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1;
                int ch2;
                if (ch0 < 0x7f)
                {
                    delta = (ch0 == EOF ? 0 : 1);
                    return ch0;
                }
                else if ((ch0 & 0xe0) == 0xc0)
                {
                    delta = 2;
                    ch1 = bStrm.ReadByte();
                    if ((ch1 & 0xc0) == 0x80)
                        return ((ch0 & 0x1f) << 6) + (ch1 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else if ((ch0 & 0xf0) == 0xe0)
                {
                    delta = 3;
                    ch1 = bStrm.ReadByte();
                    ch2 = bStrm.ReadByte();
                    if ((ch1 & ch2 & 0xc0) == 0x80)
                        return ((ch0 & 0xf) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else
                    throw BadUTF8();
            }

            public sealed override int ReadPos
            {
                get { return (int)bStrm.Position - delta; }
            }

            public sealed override int Peek()
            {
                int rslt = Read();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            /// <summary>
            /// Returns the string from the buffer between
            /// the given file positions.  This needs to be
            /// done carefully, as the number of characters
            /// is, in general, not equal to (end - beg).
            /// </summary>
            /// <param name="beg">Begin filepos</param>
            /// <param name="end">End filepos</param>
            /// <returns></returns>
            public sealed override string GetString(int beg, int end)
            {
                int i;
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (i = 0; bStrm.Position < end; i++)
                    arr[i] = (char)Read();
                bStrm.Position = savePos;
                return new String(arr, 0, i);
            }

            // Pos is the position *after* reading chr!
            public sealed override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Big-endian UTF16 files.
        /// </summary>
        public sealed class BigEndTextBuff : TextBuff
        {
            internal BigEndTextBuff(Stream str) : base(str) { } // 

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                return (ch0 << 8) + ch1;
            }
        }
        
        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Little-endian UTF16 files.
        /// </summary>
        public sealed class LittleEndTextBuff : TextBuff
        {
            internal LittleEndTextBuff(Stream str) : base(str) { } // { this.bStrm = new BufferedStream(str); }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                return (ch1 << 8) + ch0;
            }
        }
        
        // =================== End Nested classes =======================

        public Scanner(Stream file) {
            buffer = TextBuff.NewTextBuff(file); // selected by /unicode option
            this.cNum = -1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }

        public Scanner() { }

        void GetChr()
        {
            if (chr == '\n') 
            { 
                lineStartNum = cNum + 1; 
                lNum++; 
            }
            chr = buffer.Read();
            cNum++;
        }

        void MarkToken()
        {
            tokPos = buffer.ReadPos;
            tokNum = cNum;
            tokLin = lNum;
            tokCol = cNum - lineStartNum;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokLen = cNum - tokNum;
            tokEPos = buffer.ReadPos;
            tokELin = lNum;
            tokECol = cNum - lineStartNum;
        }
 
        // ================ StringBuffer Initialization ===================

        public void SetSource(string source, int offset)
        {
            this.buffer = new StringBuff(source);
            this.buffer.Pos = offset;
            this.cNum = offset - 1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }
        
        public int GetNext(ref int state, out int start, out int end)
        {
            Tokens next;
            EolState = state;
            next = (Tokens)Scan();
            state = EolState;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }

        // ======== IScanner<> Implementation =========

        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseTokeen is defined
            // that is used, otherwise int.MaxValue is used.
            //
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        int yyleng { get { return tokLen; } }
        int yypos { get { return tokPos; } }
        int yyline { get { return tokLin; } }
        int yycol { get { return tokCol; } }

        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        void yyless(int n) { 
            buffer.Pos = tokPos;
            cNum = tokNum;
            for (int i = 0; i <= n; i++) GetChr();
            MarkEnd();
        }

        public IErrorHandler Handler { get { return this.handler; }
                                       set { this.handler = value; }}

        // ============ methods available in actions ==============

        internal int YY_START {
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    bool inAccept = false; // inAccept ==> current state is an accept state
                    Result rslt = Result.noMatch;
                    // skip "idle" transitions
#if LEFTANCHORS
                    if (lineStartNum == cNum && NextState(anchorState[CurrentSc]) != currentStart)
                        state = anchorState[CurrentSc];
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[CurrentSc];
                                if (NextState(anchor) != state) {
                                    state = anchor; 
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    
                    while ((next = NextState()) != currentStart)
                        if (inAccept && next > maxAccept) // need to prepare backup data
                        {
                            Context ctx = new Context();
                            rslt = Recurse2(ctx, next);
                            if (rslt == Result.noMatch) RestoreStateAndPos(ctx);
                            // else if (rslt == Result.contextFound) RestorePos(ctx);
                            break;
                        }
                        else
                        {
                            state = next;
                            GetChr();
                            if (state <= maxAccept) inAccept = true;
                        }
#else // !BACKUP
#if LEFTANCHORS
                    if (lineStartNum == cNum) {
                        int anchor = anchorState[CurrentSc];
                        if (NextState(anchor) != currentStart)
                            state = anchor;
                    }
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                anchor = anchorState[CurrentSc];
                                if (NextState(anchor) != state) {
                                    state = anchor;
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    // common code
                    while ((next = NextState()) != currentStart)
                    {
                        state = next;
                        GetChr();
                    }
#endif // BACKUP
                    if (state > maxAccept) 
                        state = currentStart;
                    else
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            return (int)Tokens.EOF;
        case 1:
/* Ignore */
            break;
        case 2:
return (int)AsmHighlighterToken.COMMENT_LINE;
            break;
        case 3:
        case 15:
        case 16:
return (int)AsmHighlighterToken.UNDEFINED;
            break;
        case 4:
        case 5:
        case 32:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        case 6:
return (int)AsmHighlighterToken.LEFT_PARENTHESIS;
            break;
        case 7:
        case 12:
return (int)AsmHighlighterToken.NUMBER;
            break;
        case 8:
return (int)AsmHighlighterToken.RIGHT_PARENTHESIS;
            break;
        case 9:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        case 10:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        case 11:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        case 13:
return (int)AsmHighlighterToken.OPERATOR;
            break;
        case 14:
return (int)AsmHighlighterToken.OPERATOR;
            break;
        case 17:
return (int)AsmHighlighterToken.DELIMITER;
            break;
        case 18:
return (int)AsmHighlighterToken.LEFT_SQUARE_BRACKET;
            break;
        case 19:
return (int)AsmHighlighterToken.RIGHT_SQUARE_BRACKET;
            break;
        case 20:
return (int)AsmHighlighterToken.OPERATOR;
            break;
        case 21:
return (int)AsmHighlighterToken.OPERATOR;
            break;
        case 22:
return (int)AsmHighlighterToken.STRING_LITERAL;
            break;
        case 23:
return (int)AsmHighlighterToken.STRING_LITERAL;
            break;
        case 24:
        case 30:
        case 31:
return (int)AsmHighlighterToken.FLOAT;
            break;
        case 25:
return (int)AsmHighlighterToken.NUMBER;
            break;
        case 26:
return (int)AsmHighlighterToken.NUMBER;
            break;
        case 27:
return (int)AsmHighlighterToken.NUMBER;
            break;
        case 28:
        case 29:
return (int)AsmHighlighterToken.FLOAT;
            break;
        case 33:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        case 34:
return (int)AsmHighlighterTokenProvider.GetTokenFromIdentifier(yytext);
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
        }

#if BACKUP
        Result Recurse2(Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, chr) != currentStart AND
            //         NextState(state, chr) is not an accept state.
            //
            bool inAccept;
            SaveStateAndPos(ctx);
            state = next;
            if (state == eofNum) return Result.accept;
            GetChr();
            inAccept = false;

            while ((next = NextState()) != currentStart)
            {
                if (inAccept && next > maxAccept) // need to prepare backup data
                    SaveStateAndPos(ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetChr(); 
                inAccept = (state <= maxAccept);
            }
            if (inAccept) return Result.accept; else return Result.noMatch;
        }

        void SaveStateAndPos(Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.cNum  = cNum;
            ctx.state = state;
            ctx.cChr = chr;
        }

        void RestoreStateAndPos(Context ctx)
        {
            buffer.Pos = ctx.bPos;
            cNum = ctx.cNum;
            state = ctx.state;
            chr = ctx.cChr;
        }

        void RestorePos(Context ctx) { buffer.Pos = ctx.bPos; cNum = ctx.cNum; }
#endif // BACKUP

        // ============= End of the tokenizer code ================

        internal void BEGIN(int next)
        { CurrentSc = next; }

#if STACK        
        internal void yy_clear_stack() { scStack.Clear(); }
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(CurrentSc);
            CurrentSc = state;
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				CurrentSc = newSc;
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class Scanner
} // end namespace
